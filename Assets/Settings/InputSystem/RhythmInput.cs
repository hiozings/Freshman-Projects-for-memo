//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/InputSystem/RhythmInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RhythmInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RhythmInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RhythmInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""f9893f96-03c8-4f3d-8eb5-e90609426e57"",
            ""actions"": [
                {
                    ""name"": ""JKey"",
                    ""type"": ""Button"",
                    ""id"": ""7826d2d2-9574-4bb4-8f79-5c7cb30a353f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KKey"",
                    ""type"": ""Button"",
                    ""id"": ""9f2b064d-37cc-4e12-8b82-a9d2edc2ddc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LKey"",
                    ""type"": ""Button"",
                    ""id"": ""def1ac94-b145-468a-9a6a-5ddc69b82c56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0604de0a-4352-4df6-82de-8539ed9738b8"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edde006a-0664-4c0f-81be-9d65e62ee064"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f9464d6-b782-4703-ad01-9a7308133479"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_JKey = m_Gameplay.FindAction("JKey", throwIfNotFound: true);
        m_Gameplay_KKey = m_Gameplay.FindAction("KKey", throwIfNotFound: true);
        m_Gameplay_LKey = m_Gameplay.FindAction("LKey", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_JKey;
    private readonly InputAction m_Gameplay_KKey;
    private readonly InputAction m_Gameplay_LKey;
    public struct GameplayActions
    {
        private @RhythmInput m_Wrapper;
        public GameplayActions(@RhythmInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @JKey => m_Wrapper.m_Gameplay_JKey;
        public InputAction @KKey => m_Wrapper.m_Gameplay_KKey;
        public InputAction @LKey => m_Wrapper.m_Gameplay_LKey;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @JKey.started += instance.OnJKey;
            @JKey.performed += instance.OnJKey;
            @JKey.canceled += instance.OnJKey;
            @KKey.started += instance.OnKKey;
            @KKey.performed += instance.OnKKey;
            @KKey.canceled += instance.OnKKey;
            @LKey.started += instance.OnLKey;
            @LKey.performed += instance.OnLKey;
            @LKey.canceled += instance.OnLKey;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @JKey.started -= instance.OnJKey;
            @JKey.performed -= instance.OnJKey;
            @JKey.canceled -= instance.OnJKey;
            @KKey.started -= instance.OnKKey;
            @KKey.performed -= instance.OnKKey;
            @KKey.canceled -= instance.OnKKey;
            @LKey.started -= instance.OnLKey;
            @LKey.performed -= instance.OnLKey;
            @LKey.canceled -= instance.OnLKey;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnJKey(InputAction.CallbackContext context);
        void OnKKey(InputAction.CallbackContext context);
        void OnLKey(InputAction.CallbackContext context);
    }
}
